plugins {
    id 'java-library'
    id 'com.modrinth.minotaur' version '2.+'
    id 'net.darkhax.curseforgegradle' version '1.1.18'
    id 'idea'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
}

group = "${mod_group}"
version = "${mod_version}"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile) {
    options.release = 17
    options.encoding = 'UTF-8'
}


subprojects {
    apply plugin: 'java-library'

    group = "${project.group}"
    version = "${project.version}"

    java {
        withSourcesJar()

        toolchain.languageVersion = JavaLanguageVersion.of(17)
    }

    tasks.withType(JavaCompile) {
        options.release = 17
        options.encoding = 'UTF-8'
    }

    tasks.withType(ProcessResources).configureEach {
        var replaceProperties = [
                neo_version: neo_version, neo_version_range: neo_version_range, neo_loader_range: neo_loader_version_range,

                mc_version: mc_version, mc_version_range: mc_version_range,
                mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version, mod_authors: mod_authors, mod_description: mod_description, pack_format: pack_format_version,

                fabric_loader_range:  fabric_loader_version, fabric_version: fabric_version
        ]
        inputs.properties replaceProperties

        filesMatching(["META-INF/mods.toml", "pack.mcmeta", "fabric.mod.json"]) {
            expand replaceProperties + [project: project]
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
        it.options.encoding = 'UTF-8'
    }

    tasks.withType(Jar).tap {
        configureEach {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            from("LICENSE") {
                rename { "${it}_${project.base.archivesName.get()}" }
            }
        }
    }

}
