plugins {
    id 'java'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    version = "${mod_version}_${version_type}"
    group = "${mod_group}"

    tasks.withType(Javadoc).configureEach {
        var standardJavadocDocletOptions = options as StandardJavadocDocletOptions

        standardJavadocDocletOptions.addStringOption("Xdoclint:none", "-quiet")
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
        manifest {
            attributes([
                    "Specification-Title": "${mod_name}",
                    "Specification-Vendor": "${mod_authors}",
                    "Specification-Version": "${mod_version}-${version_type}",
                    "Implementation-Title": name,
                    "Implementation-Version": archiveVersion,
                    "Implementation-Vendor": "${mod_authors}"
            ])
        }
    }

    tasks.withType(ProcessResources).configureEach {
        var replacedProperties = [
                "mc_version": mc_version, "mc_version_range": mc_version_range,
                "neo_version": neo_version, "neo_version_range": neo_version_range, "neo_loader_version_range": neo_loader_version_range,
                "yarn_mappings": yarn_mappings, "fabric_version": fabric_version, "fabric_loader_version": fabric_loader_version,
                "mod_id": mod_id, "mod_name": mod_name, "mod_license": mod_license, "mod_version": mod_version,
                "mod_authors": mod_authors, "mod_description": mod_description, "mod_version_type": version_type,
                "pack_format_version": pack_format_version
        ]
        inputs.properties replacedProperties

        filesMatching(["META-INF/mods.toml", "pack.mcmeta", "fabric.mod.json"]) {
            expand replacedProperties + [project: project]
        }
    }
}

tasks.withType(AbstractArchiveTask).configureEach {
    setPreserveFileTimestamps(false)
    setReproducibleFileOrder(false)
}