plugins {
    id 'net.neoforged.gradle.vanilla' version '7.0.107' apply false
    id 'net.neoforged.gradle.userdev' version '7.0.107' apply false
    id 'fabric-loom' version '1.6-SNAPSHOT' apply false

    id 'java-library'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
}

group = "${mod_group}"
version = "${mc_version}.${mod_version}"

subprojects.forEach {
    it.plugins.apply 'java-library'

    it.group = "${project.group}"
    it.version = "${project.version}-${it.name}"
    it.base.archivesName = "GuidebookApi-${it.name}"

    it.java {
        withSourcesJar ()

        toolchain.languageVersion = JavaLanguageVersion.of(21)

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    it.tasks.withType(ProcessResources).configureEach {
        var replaceProperties = [
                neo_version: neo_version, neo_version_range: neo_version_range, neo_loader_range: neo_loader_version_range,

                mc_version: mc_version, mc_version_range: mc_version_range,
                mod_id: mod_id, mod_name: mod_name, mod_license: mod_license,
                mod_version: mod_version, mod_authors: mod_authors, mod_description: mod_description, pack_format: pack_format_version,

                fabric_loader_range:  fabric_loader_version, fabric_version: fabric_version
        ]
        inputs.properties replaceProperties

        filesMatching(["META-INF/neoforge.mods.toml", "pack.mcmeta", "fabric.mod.json"]) {
            expand replaceProperties + [project: project]
        }
    }

    it.tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
        it.options.encoding = 'UTF-8'
    }

    it.tasks.withType(Jar).tap {
        configureEach {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            from project(":CommonApi").sourceSets.main.output

            from("LICENSE") {
                rename { "${it}_${project.base.archivesName.get()}"}
            }
        }
    }
}